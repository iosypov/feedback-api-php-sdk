<?php

declare(strict_types=1);

/*
 * FeedbackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FeedbackAPILib\Tests\Controllers;

use Core\TestCase\TestParam;
use FeedbackAPILib\Controllers\FeedbackController;
use FeedbackAPILib\Exceptions;
use FeedbackAPILib\Models;

class FeedbackControllerTest extends BaseTestController
{
    /**
     * @var FeedbackController FeedbackController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getFeedbackController();
    }

    public function testTestCreateFeedback()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"rating":4,"suggestion":"Some screenshots would help","page":"https://example.com/docs/' .
            'tutorial/1","userId":"abc-xyz"}',
            Models\FeedbackReq::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createFeedback($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['SET-COOKIE'] = ["", false];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(201)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->assert();
    }

    public function testTestUpdateFeedbackById()
    {
        // Parameters for the API call
        $id = 'c73bcdcc-2669-4bf6-81d3-e4ae73fb11fd';
        $body = TestParam::object(
            '{"rating":4,"userId":"abc-xyz"}',
            Models\FeedbackReq::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updateFeedbackById($id, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->assert();
    }
}
