<?php

declare(strict_types=1);

/*
 * FeedbackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FeedbackAPILib\Controllers;

use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FeedbackAPILib\Exceptions\ApiException;
use FeedbackAPILib\Exceptions\InternalServerErrorException;
use FeedbackAPILib\Exceptions\TooManyRequestsException;
use FeedbackAPILib\Exceptions\UnauthorizedException;
use FeedbackAPILib\Models\Credentials;

class CredentialsController extends BaseController
{
    /**
     * ### Start here by creating your credentials
     * Be careful to save the private key that is returned. You will not be able to retrieve it again.
     * You can only have one private key at a time.
     * Private key is not to be shared with anyone, do not expose it in your frontend code.
     *
     *
     * @return Credentials Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCredentials(): Credentials
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/credentials')->auth('global');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(Credentials::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ### Rotate credentials
     * Generate a new private key and invalidate the current one.
     * Use this in case your private key is compromised or for security reasons.
     *
     *
     * @param string $xAPIKEY Private key. Create a tenant to generate.
     *
     * @return Credentials Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function rotateCredentials(string $xAPIKEY): Credentials
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/credentials')
            ->auth('global')
            ->parameters(HeaderParam::init('X-API-KEY', $xAPIKEY));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(Credentials::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * ### Delete credentials
     * Invalidate your current private key.
     * You will no longer be able to create or read feedback.
     *
     *
     * @param string $xAPIKEY Private key. Create a tenant to generate.
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteCredentials(string $xAPIKEY): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/credentials')
            ->auth('global')
            ->parameters(HeaderParam::init('X-API-KEY', $xAPIKEY));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
