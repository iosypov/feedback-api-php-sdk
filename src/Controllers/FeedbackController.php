<?php

declare(strict_types=1);

/*
 * FeedbackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FeedbackAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FeedbackAPILib\Exceptions\ApiException;
use FeedbackAPILib\Exceptions\BadRequestException;
use FeedbackAPILib\Exceptions\InternalServerErrorException;
use FeedbackAPILib\Exceptions\NotFoundException;
use FeedbackAPILib\Exceptions\TooManyRequestsException;
use FeedbackAPILib\Exceptions\UnauthorizedException;
use FeedbackAPILib\Models\Feedback;
use FeedbackAPILib\Models\FeedbackReq;
use FeedbackAPILib\Models\FeedbackResponse;
use FeedbackAPILib\Models\XORDERBYEnum;
use FeedbackAPILib\Models\XORDEREnum;

class FeedbackController extends BaseController
{
    /**
     * ### Create a new feedback
     * You can explore sample payloads below.
     * Every feedback must have at least one properties:
     * - `rating`: numeric value (star rating)
     * - `sentiment`: boolean value (like/dislike button)
     * - `reasons`: list of text values (multiple choice questions)
     * - `suggestion`: text value (free text input)
     *
     * In addition, you may provide any of context values:
     * - `userId`: string value (for logged in users, we'll generate one for anonymous users)
     * - `page`: text value (url of the page where the feedback was given)
     * - `category`: text value (category of the page where the feedback was given)
     * - `apiOperationId`: text value (operationId for OpenAPI docs)
     * - `tags`: list of text values (product name, feature name, etc.)
     *
     *
     * @param FeedbackReq $body
     *
     * @return Feedback Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createFeedback(FeedbackReq $body): Feedback
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/feedback')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad Request', BadRequestException::class))
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(Feedback::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get feedback.
     *
     * @param string $xAPIKEY Private key. Create a tenant to generate.
     * @param float[]|null $rating Rating to filter by.
     * @param bool[]|null $sentiment Sentiment to filter by.
     * @param string[]|null $reasons Reasons to filter by.
     * @param string[]|null $userId User ID to filter by.
     * @param string[]|null $userIP IP address to filter by.
     * @param string[]|null $page Page to filter by.
     * @param string[]|null $category Category to filter by.
     * @param string[]|null $apiOperationId Operation to filter by.
     * @param string[]|null $tags Tags to filter by.
     * @param float|null $xPAGE Page number.
     * @param float|null $xPERPAGE Items per page.
     * @param string|null $xORDER Sort order.
     * @param string|null $xORDERBY Order by.
     *
     * @return FeedbackResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getFeedback(
        string $xAPIKEY,
        ?array $rating = null,
        ?array $sentiment = null,
        ?array $reasons = null,
        ?array $userId = null,
        ?array $userIP = null,
        ?array $page = null,
        ?array $category = null,
        ?array $apiOperationId = null,
        ?array $tags = null,
        ?float $xPAGE = 1,
        ?float $xPERPAGE = 50,
        ?string $xORDER = XORDEREnum::DESC,
        ?string $xORDERBY = XORDERBYEnum::CREATEDAT
    ): FeedbackResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/feedback')
            ->auth('global')
            ->parameters(
                HeaderParam::init('X-API-KEY', $xAPIKEY),
                QueryParam::init('rating', $rating),
                QueryParam::init('sentiment', $sentiment),
                QueryParam::init('reasons', $reasons),
                QueryParam::init('userId', $userId),
                QueryParam::init('userIP', $userIP),
                QueryParam::init('page', $page),
                QueryParam::init('category', $category),
                QueryParam::init('apiOperationId', $apiOperationId),
                QueryParam::init('tags', $tags),
                HeaderParam::init('X-PAGE', $xPAGE),
                HeaderParam::init('X-PER-PAGE', $xPERPAGE),
                HeaderParam::init('X-ORDER', $xORDER)->serializeBy([XORDEREnum::class, 'checkValue']),
                HeaderParam::init('X-ORDER-BY', $xORDERBY)->serializeBy([XORDERBYEnum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(FeedbackResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get feedback by id.
     *
     * @param string $id Resource identifier string.
     * @param string $xAPIKEY Private key. Create a tenant to generate.
     *
     * @return Feedback Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getFeedbackById(string $id, string $xAPIKEY): Feedback
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/feedback/{id}')
            ->auth('global')
            ->parameters(TemplateParam::init('id', $id), HeaderParam::init('X-API-KEY', $xAPIKEY));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad Request', BadRequestException::class))
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(404, ErrorType::init('Not found', NotFoundException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(Feedback::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update feedback by id.
     *
     * @param string $id Resource identifier string.
     * @param FeedbackReq $body
     *
     * @return Feedback Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateFeedbackById(string $id, FeedbackReq $body): Feedback
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/feedback/{id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('id', $id),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Bad Request', BadRequestException::class))
            ->throwErrorOn(401, ErrorType::init('Unauthorized', UnauthorizedException::class))
            ->throwErrorOn(404, ErrorType::init('Not found', NotFoundException::class))
            ->throwErrorOn(429, ErrorType::init('Too Many Requests', TooManyRequestsException::class))
            ->throwErrorOn(500, ErrorType::init('Internal Server Error', InternalServerErrorException::class))
            ->type(Feedback::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
